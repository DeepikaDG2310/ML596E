# -*- coding: utf-8 -*-
"""APP_Dangerrousness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3ex8ygTbXZWHKP3eqUSuU-NuUdR7xhI
"""

import os
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd
from util import load_data, predict_batch
from App_dangerrousness import BERTClassifier, TextClassificationDataset,train,evaluate, predict_sentiment
import argparse
from config import * 


# Set up CLI argument parser
def parse_args():
    parser = argparse.ArgumentParser(description="Predict the app dangerousness usinig the BERT model finetuned for text classification.")
    parser.add_argument('--data_file', type=str, required=True, help="Path to the CSV file containing texts and labels.")
    return parser.parse_args()

# Function to load the model
def load_model(bert_model_name, num_classes, batch_size, learning_rate, model_path, device):
    model = BERTClassifier(bert_model_name, num_classes, batch_size, learning_rate).to(device)
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.eval()  # Set the model to evaluation mode
    return model

def predict_reviews_from_file(file_path, tokenizer, model, max_length, batch_size, device):

  data_file = file_path
  texts, labels = load_data(data_file)
  
  dataset =  TextClassificationDataset(texts, labels, tokenizer, max_length)
  dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

  df= pd.DataFrame({'Review': texts})  
  # Predict the classes
  predictions = predict_batch(model, dataloader, device)
    
  # Map predictions to classes
  pred_labels = ["safe" if pred == 1 else "not-safe" for pred in predictions]
    
  # Add the predictions back to the dataframe
  df['prediction'] = pred_labels

  return df
  
  

  
args = parse_args()


file_path = args.data_file  
    
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = load_model(bert_model_name, num_classes, batch_size, learning_rate, model_path, device)
    
df_with_predictions = predict_reviews_from_file(file_path, tokenizer, model, max_length, batch_size, device)
 
# Save the results to a new CSV
df_with_predictions.to_csv("reviews_with_predictions.csv", index=False)
        
print("Predictions saved to 'reviews_with_predictions.csv'")



